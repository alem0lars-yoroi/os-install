---

- name: Unmount pre-existing partitions and mapped devices
  unmount:
    basic:      /mnt/gentoo
    encryption: true
    lvm:        true

- name: Make partition tables
  command: "parted -s {{ item }} mklabel gpt"
  with_items: "{{ partitions |
                  selectattr('disk', 'defined') |
                  map(attribute='disk') |
                  list |
                  unique }}"

- name: Create partitions
  create_partition:
    name:       "{{ item.name                       }}"
    disk:       "{{ item.disk                       }}"
    fs:         "{{ item.fs                         }}"
    end:        "{{ item.end                        }}"
    flags:      "{{ item.flags      | default(omit) }}"
    encryption: "{{ item.encryption | default(omit) }}"
  when: "{{ item.type == 'physical' }}"
  with_items: "{{ partitions }}"
  register: _output

- name: Add physical partitions infos to partitions variable
  set_fact:
    partitions: "{{ _output.results |
                    map(attribute='result') |
                    select('defined') |
                    map_merge(partitions, 'match_key', 'raw_name', 'name') }}"

- name: Create LVM Volume Groups
  lvg:
    vg:  "{{ item.name }}"
    pvs: "{{ ( partitions |
               selectattr('name', 'equalto', item.pv_name) |
               first
             ).device }}"
  when: "{{ item.type == 'lvm-vg' }}"
  failed_when: "{{ 'lvm' not in
                 ( partitions |
                   selectattr('name', 'equalto', item.pv_name) |
                   first
                 ).flags }}"
  with_items: "{{ partitions }}"

- name: Create LVM Logical Volumes
  lvol:
    lv:   "{{ item.name    }}"
    vg:   "{{ item.vg_name }}"
    size: "{{ item.size    }}"
  when: "{{ item.type == 'lvm-lv' }}"
  failed_when: "{{ ( partitions |
                     selectattr('name', 'equalto', item.vg_name) |
                     first
                   ).type != 'lvm-vg' }}"
  with_items: "{{ partitions }}"

- name: Add LVM Logical Volumes infos to partitions variable (1/2)
  set_fact:
    item: "{{ item |
              add_item('device',
                       ['/dev', item.vg_name, item.name] | join('/')) }}"
  when: "{{ item.type == 'lvm-lv' }}"
  with_items: "{{ partitions }}"
  register: _output

- name: Add LVM Logical Volumes infos to partitions variable (2/2)
  set_fact:
    partitions: "{{ _output.results |
                    selectattr('ansible_facts', 'defined') |
                    map(attribute='ansible_facts.item') |
                    list |
                    map_merge(partitions, 'match_key', 'name') }}"

- name: Format swap
  command: "mkswap {{ item.device }}"
  when: "{{ item.get('fs') == 'swap' }}"
  with_items: "{{ partitions }}"

- name: Format fat32 partitions
  command: "mkfs.vfat -F 32 {{ item.device }}"
  when: "{{ item.get('fs', '') == 'fat32' }}"
  with_items: "{{ partitions }}"

- name: Format other partitions
  filesystem:
    fstype: "{{ item.fs }}"
    dev:    "{{ item.device }}"
  when: "{{ 'fs' in item and
            item.type != 'tmp' and
            not item.fs in ['swap', 'fat32'] and
            (not 'lvm' in item.flags if 'flags' in item else true) }}"
  with_items: "{{ partitions }}"

- name: Prepare mountpoint
  file:
    path: /mnt/gentoo
    state: directory

- name: Remove old fstab
  file:
    path: /etc/fstab
    state: absent

- name: Mount partitions # It will be copied later to final destination.
  mount:
    src:    "{{ item | mount_device() }}"
    name:   "{{ item | mount_path(root_dir='/mnt/gentoo') }}"
    fstype: "{{ item | mount_fs() }}"
    opts:   "{{ item | mount_opts() }}"
    dump:   "{{ item | mount_backup() }}"
    passno: "{{ item | mount_check() }}"
    state:  "{{ item | mount_state({'tmp': 'present'}, default='mounted') }}"
  with_items: "{{ partitions |
                  selectattr('mount', 'defined') |
                  sorted_by_path(attribute='mount.path') }}"

- name: Mount EFI variables # It will be copied later to final destination.
  mount:
    src: efivars
    name: /sys/firmware/efi/efivars
    fstype: efivarfs
    opts: defaults
    dump: '0'
    passno: '0'
    state: present
  when: "{{ boot.uefi }}"

- name: Remove old crypttab
  file:
    path: /etc/crypttab
    state: absent

- name: Update crypttab # It will be copied later to final destination.
  crypttab:
    backing_device: "{{ item.raw_device }}"
    name: "{{ item.device }}"
    state: present
    password: "-"
  when: "{{ 'encryption' in item }}"
  with_items: "{{ partitions }}"
